/** @param {NS} ns **/
import { key } from "/scripts/OAuth.js"

const repo = "SlyCedix/bitburner-scripts"
const branch = "main"
const treeURL = `https://api.github.com/repos/${repo}/git/trees/${branch}?recursive=1`
const rawURL = `https://raw.githubusercontent.com/${repo}/${branch}`

const treeFile = 'tree.txt'

export async function main(ns) {
	if(ns.fileExists(treeFile)) {
		var oldTree = JSON.parse(ns.read(treeFile));
	} else {
		var oldTree = [];
	}

	while(true) {
		let treeFetch = (await getURL(treeURL, true)).tree;

		let toUpdate = treeFetch.filter((entry) => {
			return entry.path.includes('.ns')
				&& !(oldTree.filter(node => node.sha == entry.sha).length);
		})

		let runUpdater = false;

		for (let treeEntry of toUpdate) {
			let path = `/${treeEntry.path}`

			if (path == ns.getScriptName()) {
				runUpdater = true;
			} else {
				let processes = ns.ps().filter((process) => {
					return process.filename == path;
				});

				if(processes.length > 0) {
					ns.scriptKill(path, ns.getHostname());
				}

				ns.tprint(`INFO: Attempting to download ${path}`)
				let status = await getURL(rawURL + path);

				if(status) {
					await ns.write(path, status)
					ns.tprint(`SUCCESS: Downloaded ${path}`);
				} else {
					ns.tprint(`ERROR: Failed to download ${path} from ${rawURL + path}`);
				}

				for(let process of processes) {
					ns.run(process.filename, process.threads, process.args)
				}
			}
		}

		if(toUpdate.length > 0) {
			await ns.write('tree.txt', JSON.stringify(treeFetch), 'w');
		}

		if(runUpdater) {
			ns.tprint('INFO: Updating fetcher.ns')
			ns.run('/scripts/updater.ns');
			return;
		}

		await ns.sleep(10000);
	}
}

async function getURL(url, json = false) {
	var fetchHeaders = [['Authorization', `token ${key}`]]

	if(json) fetchHeaders.push(['Content-Type', 'application/json']);
	else fetchHeaders.push(['Content-Type', 'text/plain'])

	return fetch(url, {
		method: 'GET',
		headers: fetchHeaders
	}).then( response => {
		if (response.status === 200) {
			if (json) return response.json();
			else return response.text();
		} else {
			return false;
		}
	})
} 